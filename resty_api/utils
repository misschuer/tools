local type = type
local pairs = pairs
local type = type
local mceil = math.ceil
local mfloor = math.floor
local mrandom = math.random
local mmodf = math.modf
local sgsub = string.gsub
local tinsert = table.insert
local date = require("app.libs.date")
local resty_sha256 = require "resty.sha256"
local resty_sha1 = require "resty.sha1"
local resty_md5 = require "resty.md5"
local resty_rsa = require "resty.rsa"
local str = require "resty.string"
local ngx_quote_sql_str = ngx.quote_sql_str
local uuid = require("app.libs.uuid.uuid")

local _M = {}

function _M.clear_slash(s)
    s, _ = sgsub(s, "(/+)", "/")
    return s
end

function _M.is_table_empty(t)
    if t == nil or _G.next(t) == nil then
        return true
    else
        return false
    end
end

function _M.table_is_array(t)
    if type(t) ~= "table" then return false end
    local i = 0
    for _ in pairs(t) do
        i = i + 1
        if t[i] == nil then return false end
    end
    return true
end

function _M.mixin(a, b)
    if a and b then
        for k, v in pairs(b) do
            a[k] = b[k]
        end
    end
    return a
end

function _M.random()
    return mrandom(0, 1000)
end


function _M.total_page(total_count, page_size)
    local total_page = 0
    if total_count % page_size == 0 then
        total_page = total_count / page_size
    else
        local tmp, _ = mmodf(total_count/page_size)
        total_page = tmp + 1
    end

    return total_page
end

function _M.now()
    local n = date()
    local result = n:fmt("%Y-%m-%d %H:%M:%S")
    return result
end

function _M.secure_str(str)
    return ngx_quote_sql_str(str)
end


function _M.string_split(str, delimiter)
    if str==nil or str=='' or delimiter==nil then
        return nil
    end
    
    local result = {}
    for match in (str..delimiter):gmatch("(.-)"..delimiter) do
        tinsert(result, match)
    end
    return result
end

function _M.print_err_format(format, ...)
    ngx.log(ngx.ERR, string.format(format, ...))
end

function _M.get_pure_uneque_id()
    local value = uuid()
    local str = ""

    for i = 1, #value do
        local byte = string.byte(value, i, i)
        if byte ~= 45 then
            str = str .. string.char(byte)
        end
    end

    return str
end

function _M.generate_token()
    return uuid()
end

function _M.string_join(delimiter, list)
    return table.concat(list, delimiter)
end

function _M.generate_digit_code(size)
    size = size or 4
    size = size > 1 and size < 100 and size or 4

    local str = ''

    for i = 1, size do
        str = str .. math.random(0, 9)
    end

    return str
end

function _M.is_valid_phone(num)
    return string.match(num, "^1%d%d%d%d%d%d%d%d%d%d$") == num
end

function  _M.escape(str)
    str = string.gsub(str, "([^%w%.%- ])", function(c) return string.format("%%%02X", string.byte(c)) end)
    return string.gsub(str, " ", "+")
end

function  _M.escape_special(str)
    str = string.gsub(str, "([^%w%.%- ])", function(c) return string.format("%%%02X", string.byte(c)) end)
    return string.gsub(str, " ", "%20")
end

function _M.escape_aliyun_sms(str)
    str = _M.escape_special(str)

    str = string.gsub(str, "+", "%20")
    str = string.gsub(str, "*", "%2A")
    str = string.gsub(str, "%%7E", "~")
    str = string.gsub(str, "%%5F", "_")

    return str
end

function _M.encode(s)
    local sha256 = resty_sha256:new()
    sha256:update(s)
    local digest = sha256:final()
    return str.to_hex(digest)
end

function _M.encode_sha1(s)
    local sha1 = resty_sha1:new()
    sha1:update(s)
    local digest = sha1:final()
    return str.to_hex(digest)
end

function _M.encode_hmac_sha1(secret,s)
    local digest = ngx.hmac_sha1(secret,s)
    return ngx.encode_base64(digest)
end

function _M.encode_md5(s)
    local md5 = resty_md5:new()
    md5:update(s)
    local digest = md5:final()
    return str.to_hex(digest)
end

function _M.encode_md5_base64(s)
    local md5 = resty_md5:new()
    md5:update(s)
    local digest = md5:final()
    return ngx.encode_base64(digest)
end


function _M.sign_rsa(s,private_key)
    local algorithm = "SHA1"
    local rsa =  resty_rsa:new({ private_key = private_key, algorithm = algorithm ,key_type = resty_rsa.KEY_TYPE.PKCS8})
    --rsa:update(s)
    local digest = rsa:sign(s)
    return ngx.encode_base64(digest)
end

function _M.verity_rsa(str,sign,public_key )
    local algorithm = "SHA1"
    local rsa =  resty_rsa:new({ public_key = public_key, algorithm = algorithm ,key_type = resty_rsa.KEY_TYPE.PKCS8})
    --rsa:update(s)
    local result = rsa:verify(str,ngx.decode_base64(sign))
    return result
end

function _M.sign_rsa2(s,private_key)
    local algorithm = "SHA256"
    local rsa =  resty_rsa:new({ private_key = private_key, algorithm = algorithm ,key_type = resty_rsa.KEY_TYPE.PKCS8})
    --rsa:update(s)
    local digest = rsa:sign(s)
    return ngx.encode_base64(digest)
end

function _M.verity_rsa2(str,sign,public_key )
    local algorithm = "SHA256"
    local rsa =  resty_rsa:new({ public_key = public_key, algorithm = algorithm ,key_type = resty_rsa.KEY_TYPE.PKCS8})
    --rsa:update(s)
    --    _M.print_info_format("sign %s",sign)
    local result = rsa:verify(str,ngx.decode_base64(sign))
    return result
end


function _M.table_key_to_list(dict)
    local list = {}
    for key, _ in pairs(dict) do
        table.insert(list, key)
    end

    return list
end

function _M.table_key_to_asc_list(dict)
    local list = _M.table_key_to_list(dict)
    table.sort(list, function(a, b)
        return a < b
    end)
    return list
end

return _M




-- local resty_sha256 = require "resty.sha256"
    -- local str = require "resty.string"
    -- local sha256 = resty_sha256:new()
    -- ngx.say(sha256:update("hello"))
    -- local digest = sha256:final()
    -- ngx.say("sha256: ", str.to_hex(digest))

    -- local resty_md5 = require "resty.md5"
    -- local md5 = resty_md5:new()
    -- if not md5 then
    --     ngx.say("failed to create md5 object")
    --     return
    -- end

    -- local ok = md5:update("hel")
    -- if not ok then
    --     ngx.say("failed to add data")
    --     return
    -- end

    -- ok = md5:update("lo")
    -- if not ok then
    --     ngx.say("failed to add data")
    --     return
    -- end

    -- local digest = md5:final()

    -- local str = require "resty.string"
    -- ngx.say("md5: ", str.to_hex(digest))
    --     -- yield "md5: 5d41402abc4b2a76b9719d911017c592"
