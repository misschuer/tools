---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019-04-02 15:31
---
---
local utils     = require("app.libs.utils")
local mi_http   = require("app.libs.mi_http")
local config    = require("app.config.config")
local cjson     = require("cjson")

local aliyun_sms = {}
aliyun_sms.VERSION = 1.0

local url               = "https://dysmsapi.aliyuncs.com/"
local sign_name         = '<短信签名>'
--子账户
local AccessKeyId       = '<AccessKeyId>'
local AccessKeySecret   = '<AccessKeySecret>'

function aliyun_sms.send_sms_code(phone, code, TemplateCode)
    if not TemplateCode then
        return {success = false, msg = 'TemplateCode is nil'}
    end

    if config.publish.debug then
        return {success = true, code = 1111}
    end

    local headers = {
        ["Content-Type"]    = mi_http.CT_JSON,
        ["Accept"]          = mi_http.CT_JSON,
    }

    code = code or utils.generate_digit_code()

    local public_data = {
        ----[[
        AccessKeyId     = AccessKeyId,
        Action          = 'SendSms',
        Format          = 'JSON',
        SignatureMethod = 'HMAC-SHA1',
        SignatureNonce  = utils.generate_token(),
        SignatureVersion= '1.0',
        Timestamp       = os.date("!%Y-%m-%dT%H:%M:%SZ"),
        Version         = '2017-05-25',

        PhoneNumbers    = phone,
        SignName        = sign_name,
        TemplateCode    = TemplateCode,
        TemplateParam   = cjson.encode({code=code}),
        RegionId        = 'default',
        SignatureType   = '',
        ----]]

        --[[
        AccessKeyId     = 'LTAIPxmCugimi4Ta',
        Action          = 'SendSms',
        Format          = 'JSON',
        PhoneNumbers    = '15721106223',
        SignName        = '谷坡家',
        SignatureMethod = 'HMAC-SHA1',
        SignatureNonce  = 'd6e0da5c-40ec-4c47-bc9b-36d3278df957',
        SignatureVersion= '1.0',
        TemplateCode    = 'SMS_165750004',
        TemplateParam   = '{"code":"1223"}',
        Timestamp       = '2019-05-27T01:52:24Z', --有问题了
        Version         = '2017-05-25',
        RegionId        = 'default',
        SignatureType   = '',
        --]]
    }

    local sortedList = utils.table_key_to_asc_list(public_data)
    local sortedDataList = {}
    for _, key in ipairs(sortedList) do
        table.insert(sortedDataList, string.format("%s=%s", utils.escape_aliyun_sms(key), utils.escape_aliyun_sms(public_data[key])))
    end
    local sortedQueryString = utils.string_join('&', sortedDataList)
    --utils.print_err_format("---------sortedQueryString = %s", sortedQueryString)

    local stringToSign = string.format('POST&%s&%s', utils.escape_aliyun_sms('/'), utils.escape_aliyun_sms(sortedQueryString))
    --utils.print_err_format("+++++++++stringToSign = %s", stringToSign)

    local signature = utils.encode_hmac_sha1(AccessKeySecret .. "&", stringToSign)
    --utils.print_err_format("@@@@@@@@@signature = %s", signature)

    -- public_data.Signature = utils.escape_special(signature)
    local url_data = sortedQueryString .. "&Signature=" .. utils.escape_aliyun_sms(signature)
    url_data = url .. "?" .. url_data
    --utils.print_err_format("url_data = %s", url_data)

    local res, err = mi_http.request(url_data, mi_http.METHOD_POST, nil, headers)
    local obj, err, status = mi_http.doResponse(res, err)

    if status == 200 and obj and obj.Code == 'OK' then
        return {success = true, code = code}
    end

    if status == 400 then
        err = cjson.decode(err)
    end
    return {success = false, msg = err and err.Code or 'unknown err', timestamp = public_data.Timestamp}
end

return aliyun_sms
